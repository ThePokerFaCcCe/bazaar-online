// <auto-generated />
using System;
using BazaarOnline.Infra.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BazaarOnline.Infra.Data.Migrations
{
    [DbContext(typeof(BazaarDbContext))]
    [Migration("20220820182544_CityISO3166")]
    partial class CityISO3166
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Advertiesements.Advertiesement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DeniedByAdminReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsAccepted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsChatOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeniedByAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Advertiesements");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Advertiesements.AdvertiesementFeatureValue", b =>
                {
                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("AdvertiesementId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FeatureId", "AdvertiesementId");

                    b.HasIndex("AdvertiesementId");

                    b.ToTable("AdvertiesementFeatureValues");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Advertiesements.AdvertiesementPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdvertiesementId")
                        .HasColumnType("int");

                    b.Property<string>("PictureName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AdvertiesementId");

                    b.ToTable("AdvertiesementPictures");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Advertiesements.AdvertiesementPrice", b =>
                {
                    b.Property<int>("AdvertiesementId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAgreement")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("AdvertiesementId");

                    b.ToTable("AdvertiesementPrice");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Categories.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Icon")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Categories.CategoryFeature", b =>
                {
                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("FeatureId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryFeatures");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Features.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FeatureType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Features.FeatureEnum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId")
                        .IsUnique();

                    b.ToTable("FeatureEnums");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Features.FeatureEnumValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FeatureEnumId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureEnumId");

                    b.HasIndex("Value");

                    b.ToTable("FeatureEnumValues");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Features.FeatureInteger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<long>("MaximumValue")
                        .HasColumnType("bigint");

                    b.Property<long>("MinimumValue")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId")
                        .IsUnique();

                    b.ToTable("FeatureIntegers");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Locations.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ISO3166")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ISO3166")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ISO3166 = 3,
                            Name = "آذربایجان شرقی"
                        },
                        new
                        {
                            Id = 2,
                            ISO3166 = 4,
                            Name = "آذربایجان غربی"
                        },
                        new
                        {
                            Id = 3,
                            ISO3166 = 24,
                            Name = "اردبیل"
                        },
                        new
                        {
                            Id = 4,
                            ISO3166 = 10,
                            Name = "اصفهان"
                        },
                        new
                        {
                            Id = 5,
                            ISO3166 = 30,
                            Name = "البرز"
                        },
                        new
                        {
                            Id = 6,
                            ISO3166 = 16,
                            Name = "ایلام"
                        },
                        new
                        {
                            Id = 7,
                            ISO3166 = 18,
                            Name = "بوشهر"
                        },
                        new
                        {
                            Id = 8,
                            ISO3166 = 23,
                            Name = "تهران"
                        },
                        new
                        {
                            Id = 9,
                            ISO3166 = 14,
                            Name = "چهارمحال وبختیاری"
                        },
                        new
                        {
                            Id = 10,
                            ISO3166 = 29,
                            Name = "خراسان جنوبی"
                        },
                        new
                        {
                            Id = 11,
                            ISO3166 = 9,
                            Name = "خراسان رضوی"
                        },
                        new
                        {
                            Id = 12,
                            ISO3166 = 28,
                            Name = "خراسان شمالی"
                        },
                        new
                        {
                            Id = 13,
                            ISO3166 = 6,
                            Name = "خوزستان"
                        },
                        new
                        {
                            Id = 14,
                            ISO3166 = 19,
                            Name = "زنجان"
                        },
                        new
                        {
                            Id = 15,
                            ISO3166 = 20,
                            Name = "سمنان"
                        },
                        new
                        {
                            Id = 16,
                            ISO3166 = 11,
                            Name = "سیستان وبلوچستان"
                        },
                        new
                        {
                            Id = 17,
                            ISO3166 = 7,
                            Name = "فارس"
                        },
                        new
                        {
                            Id = 18,
                            ISO3166 = 26,
                            Name = "قزوین"
                        },
                        new
                        {
                            Id = 19,
                            ISO3166 = 25,
                            Name = "قم"
                        },
                        new
                        {
                            Id = 20,
                            ISO3166 = 12,
                            Name = "کردستان"
                        },
                        new
                        {
                            Id = 21,
                            ISO3166 = 8,
                            Name = "کرمان"
                        },
                        new
                        {
                            Id = 22,
                            ISO3166 = 5,
                            Name = "کرمانشاه"
                        },
                        new
                        {
                            Id = 23,
                            ISO3166 = 17,
                            Name = "کهگیلویه وبویراحمد"
                        },
                        new
                        {
                            Id = 24,
                            ISO3166 = 27,
                            Name = "گلستان"
                        },
                        new
                        {
                            Id = 25,
                            ISO3166 = 1,
                            Name = "گیلان"
                        },
                        new
                        {
                            Id = 26,
                            ISO3166 = 15,
                            Name = "لرستان"
                        },
                        new
                        {
                            Id = 27,
                            ISO3166 = 2,
                            Name = "مازندران"
                        },
                        new
                        {
                            Id = 28,
                            ISO3166 = 0,
                            Name = "مرکزی"
                        },
                        new
                        {
                            Id = 29,
                            ISO3166 = 22,
                            Name = "هرمزگان"
                        },
                        new
                        {
                            Id = 30,
                            ISO3166 = 13,
                            Name = "همدان"
                        },
                        new
                        {
                            Id = 31,
                            ISO3166 = 21,
                            Name = "یزد"
                        });
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Permissions.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PermissionGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionGroupId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionGroupId = 1,
                            Title = "ساخت کاربر"
                        },
                        new
                        {
                            Id = 2,
                            PermissionGroupId = 1,
                            Title = "ویرایش کاربر"
                        },
                        new
                        {
                            Id = 3,
                            PermissionGroupId = 3,
                            Title = "ساخت دسته بندی"
                        },
                        new
                        {
                            Id = 4,
                            PermissionGroupId = 3,
                            Title = "ویرایش دسته بندی"
                        },
                        new
                        {
                            Id = 5,
                            PermissionGroupId = 2,
                            Title = "ساخت آگهی"
                        },
                        new
                        {
                            Id = 6,
                            PermissionGroupId = 2,
                            Title = "ویرایش آگهی"
                        },
                        new
                        {
                            Id = 7,
                            PermissionGroupId = 1,
                            Title = "ویرایش نقش های کاربر"
                        },
                        new
                        {
                            Id = 8,
                            PermissionGroupId = 1,
                            Title = "مشاهده مشخصات کاربران"
                        },
                        new
                        {
                            Id = 9,
                            PermissionGroupId = 4,
                            Title = "مشاهده دسترسی ها"
                        },
                        new
                        {
                            Id = 10,
                            PermissionGroupId = 4,
                            Title = "مشاهده اطلاعات نقس"
                        },
                        new
                        {
                            Id = 11,
                            PermissionGroupId = 4,
                            Title = "ساخت نقش"
                        },
                        new
                        {
                            Id = 12,
                            PermissionGroupId = 4,
                            Title = "ویرایش نقش"
                        },
                        new
                        {
                            Id = 13,
                            PermissionGroupId = 4,
                            Title = "حذف نقش"
                        },
                        new
                        {
                            Id = 14,
                            PermissionGroupId = 2,
                            Title = "حذف آگهی"
                        },
                        new
                        {
                            Id = 15,
                            PermissionGroupId = 3,
                            Title = "حذف دسته بندی"
                        },
                        new
                        {
                            Id = 16,
                            PermissionGroupId = 1,
                            Title = "حذف کاربر"
                        });
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Permissions.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("PermissionGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "User Management"
                        },
                        new
                        {
                            Id = 2,
                            Title = "Advertisement Management"
                        },
                        new
                        {
                            Id = 3,
                            Title = "Category Management"
                        },
                        new
                        {
                            Id = 4,
                            Title = "Role Management"
                        });
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Permissions.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "مدیر کل"
                        },
                        new
                        {
                            Id = 2,
                            Title = "ادمین"
                        },
                        new
                        {
                            Id = 3,
                            Title = "پشتیبان"
                        },
                        new
                        {
                            Id = 4,
                            Title = "کاربر عادی"
                        });
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Permissions.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 7
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 12
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 15
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 16
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 3
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 4
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 5
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 6
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 9
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 10
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 11
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 12
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 13
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 14
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 15
                        },
                        new
                        {
                            RoleId = 2,
                            PermissionId = 16
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 1
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 2
                        },
                        new
                        {
                            RoleId = 3,
                            PermissionId = 8
                        },
                        new
                        {
                            RoleId = 4,
                            PermissionId = 5
                        });
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Users.ActiveCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email", "Code");

                    b.ToTable("ActiveCodes");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Users.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Advertiesements.Advertiesement", b =>
                {
                    b.HasOne("BazaarOnline.Domain.Entities.Categories.Category", "Category")
                        .WithMany("Advertiesements")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BazaarOnline.Domain.Entities.Locations.City", "City")
                        .WithMany("Advertiesements")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BazaarOnline.Domain.Entities.Users.User", "User")
                        .WithMany("Advertiesements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Advertiesements.AdvertiesementFeatureValue", b =>
                {
                    b.HasOne("BazaarOnline.Domain.Entities.Advertiesements.Advertiesement", "Advertiesement")
                        .WithMany("AdvertiesementFeatureValues")
                        .HasForeignKey("AdvertiesementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BazaarOnline.Domain.Entities.Features.Feature", "Feature")
                        .WithMany("AdvertiesementFeatureValues")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertiesement");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Advertiesements.AdvertiesementPicture", b =>
                {
                    b.HasOne("BazaarOnline.Domain.Entities.Advertiesements.Advertiesement", "Advertiesement")
                        .WithMany("AdvertiesementPictures")
                        .HasForeignKey("AdvertiesementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertiesement");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Advertiesements.AdvertiesementPrice", b =>
                {
                    b.HasOne("BazaarOnline.Domain.Entities.Advertiesements.Advertiesement", "Advertiesement")
                        .WithOne("AdvertiesementPrice")
                        .HasForeignKey("BazaarOnline.Domain.Entities.Advertiesements.AdvertiesementPrice", "AdvertiesementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Advertiesement");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Categories.Category", b =>
                {
                    b.HasOne("BazaarOnline.Domain.Entities.Categories.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Categories.CategoryFeature", b =>
                {
                    b.HasOne("BazaarOnline.Domain.Entities.Categories.Category", "Category")
                        .WithMany("CategoryFeatures")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BazaarOnline.Domain.Entities.Features.Feature", "Feature")
                        .WithMany("CategoryFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Features.FeatureEnum", b =>
                {
                    b.HasOne("BazaarOnline.Domain.Entities.Features.Feature", "Feature")
                        .WithOne("FeatureEnum")
                        .HasForeignKey("BazaarOnline.Domain.Entities.Features.FeatureEnum", "FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Features.FeatureEnumValue", b =>
                {
                    b.HasOne("BazaarOnline.Domain.Entities.Features.FeatureEnum", "FeatureEnum")
                        .WithMany("FeatureEnumValues")
                        .HasForeignKey("FeatureEnumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeatureEnum");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Features.FeatureInteger", b =>
                {
                    b.HasOne("BazaarOnline.Domain.Entities.Features.Feature", "Feature")
                        .WithOne("FeatureInteger")
                        .HasForeignKey("BazaarOnline.Domain.Entities.Features.FeatureInteger", "FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Permissions.Permission", b =>
                {
                    b.HasOne("BazaarOnline.Domain.Entities.Permissions.PermissionGroup", "PermissionGroup")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionGroup");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Permissions.RolePermission", b =>
                {
                    b.HasOne("BazaarOnline.Domain.Entities.Permissions.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BazaarOnline.Domain.Entities.Permissions.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Users.UserRole", b =>
                {
                    b.HasOne("BazaarOnline.Domain.Entities.Permissions.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BazaarOnline.Domain.Entities.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Advertiesements.Advertiesement", b =>
                {
                    b.Navigation("AdvertiesementFeatureValues");

                    b.Navigation("AdvertiesementPictures");

                    b.Navigation("AdvertiesementPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Categories.Category", b =>
                {
                    b.Navigation("Advertiesements");

                    b.Navigation("CategoryFeatures");

                    b.Navigation("ChildCategories");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Features.Feature", b =>
                {
                    b.Navigation("AdvertiesementFeatureValues");

                    b.Navigation("CategoryFeatures");

                    b.Navigation("FeatureEnum");

                    b.Navigation("FeatureInteger");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Features.FeatureEnum", b =>
                {
                    b.Navigation("FeatureEnumValues");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Locations.City", b =>
                {
                    b.Navigation("Advertiesements");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Permissions.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Permissions.PermissionGroup", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Permissions.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BazaarOnline.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Advertiesements");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
